// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: 4z0H5ajimEuS
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: FZ59S2Z_LV2k/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicLoginButton2.module.css"; // plasmic-import: 4z0H5ajimEuS/css

createPlasmicElementProxy;

export const PlasmicLoginButton2__VariantProps = new Array("loginButton2");

export const PlasmicLoginButton2__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLoginButton2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "loginButton2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loginButton2
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Button
      data-plasmic-name={"loginButton"}
      data-plasmic-override={overrides.loginButton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.loginButton, {
        [sty.loginButtonloginButton2_loginButton]: hasVariant(
          $state,
          "loginButton2",
          "loginButton"
        )
      })}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textloginButton2_loginButton]: hasVariant(
            $state,
            "loginButton2",
            "loginButton"
          )
        })}
      >
        {"Login"}
      </div>
    </Button>
  );
}

const PlasmicDescendants = {
  loginButton: ["loginButton", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLoginButton2__ArgProps,
          internalVariantPropNames: PlasmicLoginButton2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoginButton2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "loginButton") {
    func.displayName = "PlasmicLoginButton2";
  } else {
    func.displayName = `PlasmicLoginButton2.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginButton2 = Object.assign(
  // Top-level PlasmicLoginButton2 renders the root element
  makeNodeComponent("loginButton"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicLoginButton2
    internalVariantProps: PlasmicLoginButton2__VariantProps,
    internalArgProps: PlasmicLoginButton2__ArgProps
  }
);

export default PlasmicLoginButton2;
/* prettier-ignore-end */
