// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: 0Wn5PD6iZBUT
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import Navbar from "../../Navbar"; // plasmic-import: TKT8XnZtrLZi/component
import Clubs2 from "../../Clubs2"; // plasmic-import: 3EueAFP_3sEI/component
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import Footer from "../../Footer"; // plasmic-import: kIdovXGtWiEz/component
import { useScreenVariants as useScreenVariants_8Rmrqs5Mzp6I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8Rmrqs5Mzp6I/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicPlayerInfo.module.css"; // plasmic-import: 0Wn5PD6iZBUT/css

createPlasmicElementProxy;

export const PlasmicPlayerInfo__VariantProps = new Array();

export const PlasmicPlayerInfo__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPlayerInfo__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "96905bf4-1594-4d5e-88bf-ff565f04d043",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.96905bf4-1594-4d5e-88bf-ff565f04d043.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8Rmrqs5Mzp6I()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Clubs2
            data-plasmic-name={"clubs2"}
            data-plasmic-override={overrides.clubs2}
            className={classNames("__wab_instance", sty.clubs2)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__uhOzD)}>
            <div className={classNames(projectcss.all, sty.freeBox__xC2PH)}>
              <div className={classNames(projectcss.all, sty.freeBox__xdMCu)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___0OoC)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"329px"}
                  height={
                    hasVariant(globalVariants, "screen", "portrait")
                      ? "120px"
                      : "214px"
                  }
                  loading={"lazy"}
                  src={$queries.query.data[0].image}
                  width={
                    hasVariant(globalVariants, "screen", "portrait")
                      ? "120px"
                      : "214px"
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___0CmUs)}>
                <div className={classNames(projectcss.all, sty.freeBox__tnxJ)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qzn9Z)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wYltr
                      )}
                    >
                      {"Position"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tXebw
                      )}
                    >
                      {"FSYP"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yfCB)}
                  >
                    <PlasmicLink__
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link
                      )}
                      component={Link}
                      href={"https://www.plasmic.app/"}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        {$queries.query.data[0].position}
                      </React.Fragment>
                    </PlasmicLink__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fiSj
                      )}
                    >
                      <React.Fragment>
                        {$queries.query.data[0].name}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1J5Jj
                      )}
                    >
                      {"92"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fbX8B)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vLuJj
                      )}
                    >
                      {"Value"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j08Jk
                      )}
                    >
                      {"Average"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vuD6M)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__cgS9C)}
                      displayHeight={"14px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"14px"}
                      height={"14px"}
                      loading={"lazy"}
                      src={
                        "https://www.iconpacks.net/icons/1/free-euro-icon-795-thumb.png"
                      }
                      width={"14px"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ru4Cf
                      )}
                    >
                      <React.Fragment>
                        {$queries.query.data[0].market_value}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1N3Wx
                      )}
                    >
                      {"7.08"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <SimpleChart
              data-plasmic-name={"chart"}
              data-plasmic-override={overrides.chart}
              className={classNames("__wab_instance", sty.chart)}
              data={[
                { region: "APAC", revenue: 3294, spend: 2675 },
                { region: "EMEA", revenue: 3245, spend: 3895 },
                { region: "LATAM", revenue: 2165, spend: 3498 },
                { region: "AMER", revenue: 3215, spend: 1656 }
              ]}
              labelField={"spend"}
              type={"line"}
            />
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "navbar", "clubs2", "link", "chart", "footer"],
  navbar: ["navbar"],
  clubs2: ["clubs2"],
  link: ["link"],
  chart: ["chart"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPlayerInfo__ArgProps,
          internalVariantPropNames: PlasmicPlayerInfo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPlayerInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPlayerInfo";
  } else {
    func.displayName = `PlasmicPlayerInfo.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicPlayerInfo = Object.assign(
  // Top-level PlasmicPlayerInfo renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    clubs2: makeNodeComponent("clubs2"),
    link: makeNodeComponent("link"),
    chart: makeNodeComponent("chart"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicPlayerInfo
    internalVariantProps: PlasmicPlayerInfo__VariantProps,
    internalArgProps: PlasmicPlayerInfo__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPlayerInfo;
/* prettier-ignore-end */
