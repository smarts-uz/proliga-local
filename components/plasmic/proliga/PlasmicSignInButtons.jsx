// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: fX0Kd1k2n7hr
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: FZ59S2Z_LV2k/component
import { useScreenVariants as useScreenVariants_8Rmrqs5Mzp6I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8Rmrqs5Mzp6I/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicSignInButtons.module.css"; // plasmic-import: fX0Kd1k2n7hr/css

createPlasmicElementProxy;

export const PlasmicSignInButtons__VariantProps = new Array();

export const PlasmicSignInButtons__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignInButtons__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8Rmrqs5Mzp6I()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      onClick={async event => {
        const $steps = {};
        $steps["goToCreateAccount"] = true
          ? (() => {
              const actionArgs = { destination: "create-account" };
              return (({ destination }) => {
                if (
                  typeof destination === "string" &&
                  destination.startsWith("#")
                ) {
                  document
                    .getElementById(destination.substr(1))
                    .scrollIntoView({ behavior: "smooth" });
                } else {
                  __nextRouter?.push(destination);
                }
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["goToCreateAccount"] != null &&
          typeof $steps["goToCreateAccount"] === "object" &&
          typeof $steps["goToCreateAccount"].then === "function"
        ) {
          $steps["goToCreateAccount"] = await $steps["goToCreateAccount"];
        }
        $steps["goToLogin"] = true
          ? (() => {
              const actionArgs = { destination: "login" };
              return (({ destination }) => {
                if (
                  typeof destination === "string" &&
                  destination.startsWith("#")
                ) {
                  document
                    .getElementById(destination.substr(1))
                    .scrollIntoView({ behavior: "smooth" });
                } else {
                  __nextRouter?.push(destination);
                }
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["goToLogin"] != null &&
          typeof $steps["goToLogin"] === "object" &&
          typeof $steps["goToLogin"].then === "function"
        ) {
          $steps["goToLogin"] = await $steps["goToLogin"];
        }
      }}
    >
      <div className={classNames(projectcss.all, sty.freeBox__xj0Ta)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hq3I)}
        >
          <Button className={classNames("__wab_instance", sty.button__juYuK)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uWgf5
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h6
                    data-plasmic-name={"h6"}
                    data-plasmic-override={overrides.h6}
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6
                    )}
                  >
                    {"Create Account"}
                  </h6>
                }

                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </Button>
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={`/signup`}
            platform={"nextjs"}
            target={"_blank"}
          >
            <Button className={classNames("__wab_instance", sty.button__qP9Xa)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0SLb
                )}
              >
                {"Login"}
              </div>
            </Button>
          </PlasmicLink__>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "h6", "link"],
  h6: ["h6"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignInButtons__ArgProps,
          internalVariantPropNames: PlasmicSignInButtons__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignInButtons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignInButtons";
  } else {
    func.displayName = `PlasmicSignInButtons.${nodeName}`;
  }
  return func;
}

export const PlasmicSignInButtons = Object.assign(
  // Top-level PlasmicSignInButtons renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h6: makeNodeComponent("h6"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicSignInButtons
    internalVariantProps: PlasmicSignInButtons__VariantProps,
    internalArgProps: PlasmicSignInButtons__ArgProps
  }
);

export default PlasmicSignInButtons;
/* prettier-ignore-end */
