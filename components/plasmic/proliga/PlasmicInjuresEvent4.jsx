// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: i9gPRWDTgmUS
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicInjuresEvent4.module.css"; // plasmic-import: i9gPRWDTgmUS/css

createPlasmicElementProxy;

export const PlasmicInjuresEvent4__VariantProps = new Array();

export const PlasmicInjuresEvent4__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInjuresEvent4__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__j20SN
        )}
      >
        {"Fixture 34"}
      </div>
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__iy4Pv)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__saKgd
            )}
          >
            {"Amount"}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__y37Kf)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nkXq
            )}
          >
            {"Stats"}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__ax9Ik)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sn2TI
            )}
          >
            {"Points"}
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInjuresEvent4__ArgProps,
          internalVariantPropNames: PlasmicInjuresEvent4__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInjuresEvent4__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInjuresEvent4";
  } else {
    func.displayName = `PlasmicInjuresEvent4.${nodeName}`;
  }
  return func;
}

export const PlasmicInjuresEvent4 = Object.assign(
  // Top-level PlasmicInjuresEvent4 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicInjuresEvent4
    internalVariantProps: PlasmicInjuresEvent4__VariantProps,
    internalArgProps: PlasmicInjuresEvent4__ArgProps
  }
);

export default PlasmicInjuresEvent4;
/* prettier-ignore-end */
