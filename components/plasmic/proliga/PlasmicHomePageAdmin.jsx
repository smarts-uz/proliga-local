// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: l6vELxZhJ9Rs
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicPageGuard as PlasmicPageGuard__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import AdminNavbar from "../../AdminNavbar"; // plasmic-import: a1eyFQc8LDBj/component
import TextInput from "../../TextInput"; // plasmic-import: xwgFLXqL07mD/component
import { useScreenVariants as useScreenVariants_8Rmrqs5Mzp6I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8Rmrqs5Mzp6I/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicHomePageAdmin.module.css"; // plasmic-import: l6vELxZhJ9Rs/css

createPlasmicElementProxy;

export const PlasmicHomePageAdmin__VariantProps = new Array();

export const PlasmicHomePageAdmin__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomePageAdmin__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8Rmrqs5Mzp6I()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <AdminNavbar
            data-plasmic-name={"adminNavbar"}
            data-plasmic-override={overrides.adminNavbar}
            className={classNames("__wab_instance", sty.adminNavbar)}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__x3C63
            )}
          >
            {"Calculation"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___1FSi0)}>
            <div className={classNames(projectcss.all, sty.freeBox__ndrfH)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8C0Cn
                )}
              >
                {"CHEMPIONAT"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kP1W1
                )}
              >
                {"KLUB"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ok06S
                )}
              >
                {"POZITSIYA"}
              </div>
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__uvoxA)}
          >
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Chempionat sort"}
              showEndIcon={true}
              value={
                generateStateValueProp($state, ["textInput", "value"]) ?? ""
              }
            />

            <TextInput
              data-plasmic-name={"textInput2"}
              data-plasmic-override={overrides.textInput2}
              className={classNames("__wab_instance", sty.textInput2)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput2", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Klub sort"}
              value={
                generateStateValueProp($state, ["textInput2", "value"]) ?? ""
              }
            />

            <TextInput
              data-plasmic-name={"textInput3"}
              data-plasmic-override={overrides.textInput3}
              className={classNames("__wab_instance", sty.textInput3)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput3", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Pozitsiya sort"}
              value={
                generateStateValueProp($state, ["textInput3", "value"]) ?? ""
              }
            />
          </Stack__>
          <div
            data-plasmic-name={"mainAction"}
            data-plasmic-override={overrides.mainAction}
            className={classNames(projectcss.all, sty.mainAction)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"actions"}
              data-plasmic-override={overrides.actions}
              hasGap={true}
              className={classNames(projectcss.all, sty.actions)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__rn7Q3)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7Lqn
                  )}
                >
                  {"Footbals"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hp381)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ualYl
                  )}
                >
                  {"MInut"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__bc0Zb)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oebsJ
                  )}
                >
                  {"Gol"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__sJHz)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k2PtJ
                  )}
                >
                  {"Assist"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ndBnt)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tWrVy
                  )}
                >
                  {"Empty game"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__onhp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lvOjn
                  )}
                >
                  {"No penalty"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___9ISmC)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__q8Tmv
                  )}
                >
                  {"-2 Gol"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hI4X)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5GwaD
                  )}
                >
                  {"Yellow card"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__f07Kg)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pv5JR
                  )}
                >
                  {"Red card"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__teVey)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qxOfz
                  )}
                >
                  {"Total"}
                </div>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"players"}
              data-plasmic-override={overrides.players}
              hasGap={true}
              className={classNames(projectcss.all, sty.players)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__yrc4)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___65Dox
                  )}
                >
                  {"Ronaldo"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__lowcJ)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jjxOo
                  )}
                >
                  {"50"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__bUsG2)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iQdMh
                  )}
                >
                  {"2"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___99VZ5)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rj0Kt
                  )}
                >
                  {"1"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__fet6M)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f6D1F
                  )}
                >
                  {"0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__klrip)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___384AU
                  )}
                >
                  {"0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hwVhb)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___18322
                  )}
                >
                  {"0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__w4Lez)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ffynT
                  )}
                >
                  {"2"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__uaRbY)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zaGz
                  )}
                >
                  {"1"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__trUg8)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rLhJb
                  )}
                >
                  {"11"}
                </div>
              </div>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "adminNavbar",
    "textInput",
    "textInput2",
    "textInput3",
    "mainAction",
    "actions",
    "players"
  ],

  adminNavbar: ["adminNavbar"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  mainAction: ["mainAction", "actions", "players"],
  actions: ["actions"],
  players: ["players"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomePageAdmin__ArgProps,
          internalVariantPropNames: PlasmicHomePageAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomePageAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomePageAdmin";
  } else {
    func.displayName = `PlasmicHomePageAdmin.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicHomePageAdmin = Object.assign(
  // Top-level PlasmicHomePageAdmin renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    adminNavbar: makeNodeComponent("adminNavbar"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    mainAction: makeNodeComponent("mainAction"),
    actions: makeNodeComponent("actions"),
    players: makeNodeComponent("players"),
    // Metadata about props expected for PlasmicHomePageAdmin
    internalVariantProps: PlasmicHomePageAdmin__VariantProps,
    internalArgProps: PlasmicHomePageAdmin__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomePageAdmin;
/* prettier-ignore-end */
