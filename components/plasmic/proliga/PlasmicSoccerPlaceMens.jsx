// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: w6mcybgJxhpK
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import IdealTeamMember from "../../IdealTeamMember"; // plasmic-import: 3I11SVbKzuHP/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicSoccerPlaceMens.module.css"; // plasmic-import: w6mcybgJxhpK/css

createPlasmicElementProxy;

export const PlasmicSoccerPlaceMens__VariantProps = new Array();

export const PlasmicSoccerPlaceMens__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSoccerPlaceMens__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__pnlSg)}>
        <IdealTeamMember
          className={classNames("__wab_instance", sty.idealTeamMember__ydPhw)}
        />
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__tq3Mf)}
      >
        <IdealTeamMember
          className={classNames("__wab_instance", sty.idealTeamMember__nLitS)}
          sergioRamos={true}
        />

        <IdealTeamMember
          className={classNames("__wab_instance", sty.idealTeamMember__wox8)}
          johnPache2={true}
        />

        <IdealTeamMember
          className={classNames("__wab_instance", sty.idealTeamMember__k5ULv)}
          mingueza={true}
        />
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox___0Xvvu)}>
        <IdealTeamMember
          className={classNames("__wab_instance", sty.idealTeamMember__aDUhW)}
          zakaryan={true}
        />

        <IdealTeamMember
          className={classNames("__wab_instance", sty.idealTeamMember__dlFlB)}
          ikerMundez={true}
        />

        <IdealTeamMember
          className={classNames("__wab_instance", sty.idealTeamMember__cHn2K)}
          robertNav={true}
        />

        <IdealTeamMember
          alcaraz={true}
          className={classNames("__wab_instance", sty.idealTeamMember__grWey)}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__p3FUy)}>
        <IdealTeamMember
          className={classNames("__wab_instance", sty.idealTeamMember__wrlxt)}
          rodrygo={true}
        />

        <IdealTeamMember
          className={classNames("__wab_instance", sty.idealTeamMember__hfPtL)}
          dovbyk={true}
        />

        <IdealTeamMember
          className={classNames("__wab_instance", sty.idealTeamMember__oPpO7)}
          willianJose={true}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSoccerPlaceMens__ArgProps,
          internalVariantPropNames: PlasmicSoccerPlaceMens__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSoccerPlaceMens__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSoccerPlaceMens";
  } else {
    func.displayName = `PlasmicSoccerPlaceMens.${nodeName}`;
  }
  return func;
}

export const PlasmicSoccerPlaceMens = Object.assign(
  // Top-level PlasmicSoccerPlaceMens renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicSoccerPlaceMens
    internalVariantProps: PlasmicSoccerPlaceMens__VariantProps,
    internalArgProps: PlasmicSoccerPlaceMens__ArgProps
  }
);

export default PlasmicSoccerPlaceMens;
/* prettier-ignore-end */
