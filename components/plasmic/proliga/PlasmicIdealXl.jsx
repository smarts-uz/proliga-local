// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: D7Sj75T4yazB
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicPageGuard as PlasmicPageGuard__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import Navbar from "../../Navbar"; // plasmic-import: TKT8XnZtrLZi/component
import Clubs2 from "../../Clubs2"; // plasmic-import: 3EueAFP_3sEI/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import SoccerPlaceMens from "../../SoccerPlaceMens"; // plasmic-import: w6mcybgJxhpK/component
import Select from "../../Select"; // plasmic-import: bCMc_ebYmgPo/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import Footer from "../../Footer"; // plasmic-import: kIdovXGtWiEz/component
import { useScreenVariants as useScreenVariants_8Rmrqs5Mzp6I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8Rmrqs5Mzp6I/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicIdealXl.module.css"; // plasmic-import: D7Sj75T4yazB/css

createPlasmicElementProxy;

export const PlasmicIdealXl__VariantProps = new Array();

export const PlasmicIdealXl__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIdealXl__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8Rmrqs5Mzp6I()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"idealXl"}
          data-plasmic-override={overrides.idealXl}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.idealXl
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Clubs2
            data-plasmic-name={"clubs2"}
            data-plasmic-override={overrides.clubs2}
            className={classNames("__wab_instance", sty.clubs2)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__mz0Fn)}>
            <div className={classNames(projectcss.all, sty.freeBox__bMWf)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3BMcr
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-jgohepLVeKvh)" }}
                        >
                          {"Ideal XI"}
                        </span>
                      </React.Fragment>
                    </h4>
                  }

                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__nd31A)}>
            <div className={classNames(projectcss.all, sty.freeBox__nSjWh)}>
              <div className={classNames(projectcss.all, sty.freeBox__mv3Y)}>
                <AntdDropdown
                  data-plasmic-name={"dropdown"}
                  data-plasmic-override={overrides.dropdown}
                  className={classNames("__wab_instance", sty.dropdown)}
                  dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
                  menuItems={() => (
                    <React.Fragment>
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem__gsvI
                        )}
                        key={"menu-item-1"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j02S
                          )}
                        >
                          {"Menu item"}
                        </div>
                      </AntdMenuItem>
                      <AntdMenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.menuItem___8Vndq
                        )}
                        key={"menu-item-2"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xbw6Z
                          )}
                        >
                          {"Menu item"}
                        </div>
                      </AntdMenuItem>
                    </React.Fragment>
                  )}
                  menuItemsJson={[
                    { type: "item", value: "action1", label: "Action 1" },
                    { type: "item", value: "action2", label: "Action 2" }
                  ]}
                >
                  <AntdButton
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fg9L1
                      )}
                    >
                      {"Dropdown"}
                    </div>
                  </AntdButton>
                </AntdDropdown>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ivfT8)}>
              <div className={classNames(projectcss.all, sty.freeBox__t5XAw)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lfNXc
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h5
                        data-plasmic-name={"h5"}
                        data-plasmic-override={overrides.h5}
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-jgohepLVeKvh)" }}
                          >
                            {"Ideal XI of the fixture Fixture 1"}
                          </span>
                        </React.Fragment>
                      </h5>
                    }

                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__kjQyd)}>
              <div className={classNames(projectcss.all, sty.freeBox__u4CMl)}>
                <SoccerPlaceMens
                  data-plasmic-name={"soccerPlaceMens"}
                  data-plasmic-override={overrides.soccerPlaceMens}
                  className={classNames("__wab_instance", sty.soccerPlaceMens)}
                />
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qwkJf)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__iCwhV)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5GM1)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kKGw5
                      )}
                    >
                      {"Players"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aY7QO)}
                  >
                    <Select
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      className={classNames("__wab_instance", sty.select)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, ["select", "value"])(
                          eventArgs[0]
                        );
                      }}
                      options={[
                        { value: "option1", label: "Option 1" },
                        { value: "option2", label: "Option 2" }
                      ]}
                      placeholder={"Players"}
                      value={generateStateValueProp($state, [
                        "select",
                        "value"
                      ])}
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__w1Wrw)}>
                  <CmsQueryRepeater
                    data-plasmic-name={"cmsDataFetcher"}
                    data-plasmic-override={overrides.cmsDataFetcher}
                    className={classNames("__wab_instance", sty.cmsDataFetcher)}
                    desc={false}
                    emptyMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__t14Gc
                            )}
                          >
                            {"No matching published entries found."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    fields={[
                      "image",
                      "clubLogo",
                      "position",
                      "name",
                      "cost",
                      "point",
                      "_id"
                    ]}
                    forceEmptyState={false}
                    forceLoadingState={false}
                    limit={0}
                    loadingMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5FHQl
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    noAutoRepeat={false}
                    noLayout={false}
                    table={"idealPlayers"}
                    useDraft={false}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__m15P
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___3YAhp
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__bfwl
                              )}
                              field={"image"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />

                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__a42Ms
                              )}
                              field={"clubLogo"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />

                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__deAe
                              )}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />

                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__xv7Rc
                              )}
                              field={"name"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ia3Pj
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__oj3Wx
                              )}
                              field={"cost"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7My3H
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField___1Mb85
                              )}
                              field={"point"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />
                          </div>
                        </div>
                      )}
                    </DataCtxReader__>
                  </CmsQueryRepeater>
                </div>
              </Stack__>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  idealXl: [
    "idealXl",
    "navbar",
    "clubs2",
    "h4",
    "dropdown",
    "button",
    "h5",
    "soccerPlaceMens",
    "select",
    "cmsDataFetcher",
    "footer"
  ],

  navbar: ["navbar"],
  clubs2: ["clubs2"],
  h4: ["h4"],
  dropdown: ["dropdown", "button"],
  button: ["button"],
  h5: ["h5"],
  soccerPlaceMens: ["soccerPlaceMens"],
  select: ["select"],
  cmsDataFetcher: ["cmsDataFetcher"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIdealXl__ArgProps,
          internalVariantPropNames: PlasmicIdealXl__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIdealXl__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "idealXl") {
    func.displayName = "PlasmicIdealXl";
  } else {
    func.displayName = `PlasmicIdealXl.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicIdealXl = Object.assign(
  // Top-level PlasmicIdealXl renders the root element
  withPlasmicPageGuard(makeNodeComponent("idealXl")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    clubs2: makeNodeComponent("clubs2"),
    h4: makeNodeComponent("h4"),
    dropdown: makeNodeComponent("dropdown"),
    button: makeNodeComponent("button"),
    h5: makeNodeComponent("h5"),
    soccerPlaceMens: makeNodeComponent("soccerPlaceMens"),
    select: makeNodeComponent("select"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicIdealXl
    internalVariantProps: PlasmicIdealXl__VariantProps,
    internalArgProps: PlasmicIdealXl__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIdealXl;
/* prettier-ignore-end */
