// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: oJ05rQ2UYoHy
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import InjuresEvent1 from "../../InjuresEvent1"; // plasmic-import: jP1iWNVmUw64/component
import InjuresEvent2 from "../../InjuresEvent2"; // plasmic-import: cv9rvkaGG2VK/component
import InjuresEvent3 from "../../InjuresEvent3"; // plasmic-import: E9xIRzzcNiyh/component
import InjuresEvent4 from "../../InjuresEvent4"; // plasmic-import: i9gPRWDTgmUS/component
import InjuredEvent5 from "../../InjuredEvent5"; // plasmic-import: MRQZA1xVuya3/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicPlayerAction.module.css"; // plasmic-import: oJ05rQ2UYoHy/css

createPlasmicElementProxy;

export const PlasmicPlayerAction__VariantProps = new Array();

export const PlasmicPlayerAction__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPlayerAction__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <InjuresEvent1
        data-plasmic-name={"injuresEvent1"}
        data-plasmic-override={overrides.injuresEvent1}
        className={classNames("__wab_instance", sty.injuresEvent1)}
      />

      <InjuresEvent2
        data-plasmic-name={"injuresEvent2"}
        data-plasmic-override={overrides.injuresEvent2}
        className={classNames("__wab_instance", sty.injuresEvent2)}
      />

      <InjuresEvent3
        data-plasmic-name={"injuresEvent3"}
        data-plasmic-override={overrides.injuresEvent3}
        className={classNames("__wab_instance", sty.injuresEvent3)}
      />

      <InjuresEvent4
        data-plasmic-name={"injuresEvent4"}
        data-plasmic-override={overrides.injuresEvent4}
        className={classNames("__wab_instance", sty.injuresEvent4)}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__sObT)}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__f2Z7N)}
        goals={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__nTuh4)}
        goalAssists={true}
      />

      <InjuredEvent5
        bigChanceCreated={true}
        className={classNames("__wab_instance", sty.injuredEvent5__cHXgO)}
      />

      <InjuredEvent5
        ballsIntoTheBox={true}
        className={classNames("__wab_instance", sty.injuredEvent5__jXQku)}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__iv3Xx)}
        penaltiesWon={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__gEg)}
        penaltiesSaved={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__hbJip)}
        saves={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__swrP7)}
        effectiveClearanes={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__pX9K)}
        penaltiesMissed={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__l4WBa)}
        ownGoals={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__q2WXq)}
        goalsAgainst={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5___3DkT8)}
        yellowCard={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__vka2)}
        secondaryYellowCard={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__mauD)}
        redCard={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__d8Saa)}
        goalAttempts={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5___6RzA)}
        effectiveDribbles={true}
        secondaryYellowCard={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__bIqjX)}
        recoviries={true}
        secondaryYellowCard={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__cWzdG)}
        lostBalls={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__lgr9G)}
        commitedPenalties={true}
      />

      <div className={classNames(projectcss.all, sty.freeBox___73C1)}>
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__mWKho)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"30px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/proliga/images/hospitalsvg.svg",
            fullWidth: 150,
            fullHeight: 150,
            aspectRatio: 1
          }}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img___24Gh)}
          displayHeight={"32px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"160px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/proliga/images/logoSponsorMainPinkpng.png",
            fullWidth: 100,
            fullHeight: 40,
            aspectRatio: undefined
          }}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2DvsJ
          )}
        >
          {"Point    -"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__vyLSz)}>
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link
          )}
          component={Link}
          href={"https://www.plasmic.app/"}
          platform={"nextjs"}
        >
          {"TOTAL FIXTURE  "}
        </PlasmicLink__>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7D9MB
          )}
        >
          {"34"}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "injuresEvent1",
    "injuresEvent2",
    "injuresEvent3",
    "injuresEvent4",
    "link"
  ],

  injuresEvent1: ["injuresEvent1"],
  injuresEvent2: ["injuresEvent2"],
  injuresEvent3: ["injuresEvent3"],
  injuresEvent4: ["injuresEvent4"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPlayerAction__ArgProps,
          internalVariantPropNames: PlasmicPlayerAction__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPlayerAction__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPlayerAction";
  } else {
    func.displayName = `PlasmicPlayerAction.${nodeName}`;
  }
  return func;
}

export const PlasmicPlayerAction = Object.assign(
  // Top-level PlasmicPlayerAction renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    injuresEvent1: makeNodeComponent("injuresEvent1"),
    injuresEvent2: makeNodeComponent("injuresEvent2"),
    injuresEvent3: makeNodeComponent("injuresEvent3"),
    injuresEvent4: makeNodeComponent("injuresEvent4"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicPlayerAction
    internalVariantProps: PlasmicPlayerAction__VariantProps,
    internalArgProps: PlasmicPlayerAction__ArgProps
  }
);

export default PlasmicPlayerAction;
/* prettier-ignore-end */
