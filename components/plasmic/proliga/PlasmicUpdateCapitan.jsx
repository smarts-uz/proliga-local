// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: XWByMSCmxs7g
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: FZ59S2Z_LV2k/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicUpdateCapitan.module.css"; // plasmic-import: XWByMSCmxs7g/css

createPlasmicElementProxy;

export const PlasmicUpdateCapitan__VariantProps = new Array();

export const PlasmicUpdateCapitan__ArgProps = new Array(
  "acceptBtn",
  "cancelBtn"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUpdateCapitan__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        modalScopeClassName={sty["modal__modal"]}
        okText={"Accept"}
        onCancel={args.cancelBtn}
        onOk={args.acceptBtn}
        onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={"Update Capitan"}
        trigger={
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            onClick={async event => {
              const $steps = {};
              $steps["updateModalOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["modal", "open"]
                      },
                      operation: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;
                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModalOpen"] != null &&
                typeof $steps["updateModalOpen"] === "object" &&
                typeof $steps["updateModalOpen"].then === "function"
              ) {
                $steps["updateModalOpen"] = await $steps["updateModalOpen"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__myGl
              )}
            >
              {"Capitan"}
            </div>
          </Button>
        }
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sCNyH
            )}
          >
            {"Do you want set this player to capitan"}
          </div>
        </div>
      </AntdModal>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "modal", "freeBox", "button"],
  modal: ["modal", "freeBox", "button"],
  freeBox: ["freeBox"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUpdateCapitan__ArgProps,
          internalVariantPropNames: PlasmicUpdateCapitan__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUpdateCapitan__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUpdateCapitan";
  } else {
    func.displayName = `PlasmicUpdateCapitan.${nodeName}`;
  }
  return func;
}

export const PlasmicUpdateCapitan = Object.assign(
  // Top-level PlasmicUpdateCapitan renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    freeBox: makeNodeComponent("freeBox"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicUpdateCapitan
    internalVariantProps: PlasmicUpdateCapitan__VariantProps,
    internalArgProps: PlasmicUpdateCapitan__ArgProps
  }
);

export default PlasmicUpdateCapitan;
/* prettier-ignore-end */
